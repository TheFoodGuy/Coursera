import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.stream.Stream;
import java.util.stream.Collectors;
/*
    Testing out how java stream works in some weird cases
    I'm just testing out some functions so I could finish mini_project_2
    for parallel programming in java course

    Implementing mostCommonFistNameOfInactiveStudentsParallelStream
    This tries to find the most common last name of inactive students only
*/
public class streamTest {
    public static void main(String[] args){
        System.out.println("Hello, World"); 
        // Let's do four students as a test 
        Student one = new Student("David", "Liang", 22, 90, false);
        Student two = new Student("Bob", "Liang", 50, 95, false);
        Student three = new Student("Emily", "Billy", 20, 85, true); 
        Student four = new Student("Ryan", "Bob", 21, 100, false); 
        
        List<Student> inactiveStudents = new ArrayList<Student>();
        inactiveStudents.add(one);
        inactiveStudents.add(two);
        inactiveStudents.add(three);
        inactiveStudents.add(four);         
        
        // now using java stream to filter out this issue 
        

        // other testing down here 
        Map<String, Double> lastNamePoints = Stream.of(inactiveStudents)
            .parallel()
            .map(s -> s.FirstName) // this forms a key in which it collects the value next
            .collect(Collectors.groupingBy(count()));

        for (Map.Entry<String, Double> entry : lastNamePoints.entrySet()){
            System.out.println(entry.getKey() + ":" + entry.getValue().toString());
        }
    }
}

