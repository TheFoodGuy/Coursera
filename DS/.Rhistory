swirl()
library(swirl)
swirl()
?read.csv
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors =  FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
cran
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, packeage == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparsion
?Comparison
filter(cran, r_version == "3.1.1", country == "IN")
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size >= 100500, r_os == "linuz-gnu")
filter(cran, size > 100500, r_os == "linuz-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5, NA, 10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
arrange(select(cran, ip_id:store))
arrange(select(cran, size:ip_id))
select(cran, size:ip_id)
cran2 <- arrange(select(cran, size:ip_id))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
desc(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb / 2^10, correct_size size+1000)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb / 2^10, correct_size = size+1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
mydf
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by()
?group_by
by_package < group_by(cran)
by_package < group_by(cran, package)
by_package <- group_by(cran, package)
by_package
mean(size)
mean(by_package)
summarize(by_package, mean(size))
submit()
tbl
pack_sum
View(cran)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum$count > 679)
?filter
top_counts <- filter(pack_sum, count > 679)
top_count s
top_counts
View(top_counts )
?desc
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, key = sex_class, value = count)
res <- gather(students2, sex_class, count, -grade)
students2
res
?separate()
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
reset()
reset
reset()
swirl()
setwd("/Coursera/DS")
getwd()
setwd("Coursera/DS")
source("practice.R")
source("practice.R")
?lm
